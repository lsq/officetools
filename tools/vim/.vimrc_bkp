"作者：京山游
"链接：https://www.zhihu.com/question/383348951/answer/330868991
"let $VIMHOME=expand('<sfile>:p:h')
"set rtp&
"let $VIMFIlES=split(&rtp,",")[0]
"redir! > vrc.txt
"let $VIMBINHOME = substitute(v:progpath, '[g]\?vim[\.ex]\{0,4\}$','', 'g')
"https://stackoverflow.com/questions/3135322/regex-in-vimscript?noredirect=1&lq=1
let versionShort= (v:version / 100).(v:version % 100)
let $VIMBINHOME = matchstr(v:progpath, '\c.*\ze[\\/]') 
if empty($VIMBINHOME)
    throw "no bin path recognized into ``".v:progpath."''"
endif
"echo $VIMBINHOME
"echo $VIMRUNTIME
"echo &runtimepath
" is v:null
"if  empty($SHELL)
if ! exists("$SHELL")
    if v:progpath =~ 'bin'
        let $VIMRUNTIME = $VIMBINHOME . '/../share/vim/vim' . g:versionShort
        let $newrtp = substitute(&runtimepath, escape($VIMBINHOME,' .\'), escape($VIMRUNTIME,' .\'),'g')
        let &runtimepath = $newrtp 
"        echo &runtimepath
        "只有\Users\Administrator\_vimrc和/home/Administrator/.vimrc相同(Junction)时有效(包含vimfile/.vim)
        "let $HOME= $HOMEPATH
    else
		if isdirectory($VIMBINHOME . '/doc')
        let $VIMRUNTIME = $VIMBINHOME
        endif
    endif
    "let &runtimepath =  $HOME . '/vimfiles,' . &runtimepath
    "let $VIMHOME = $HOME."/vimfiles"
else
    "let $VIMHOME = $HOME."/.vim"
    "let &helpfile = $VIMRUNTIME . '/doc/help.txt'
    if v:progpath =~ tolower($MSYSTEM) || v:progpath =~ '/usr/bin'

        let $VIMRUNTIME = $VIMBINHOME . '/../share/vim/vim' . g:versionShort
        "let $VIM = $VIMBINHOME . '/../share/vim'
        let $newrtp = substitute(&runtimepath, escape($VIMBINHOME,' .\'), escape($VIMRUNTIME,' .\'),'g')
        let &runtimepath =  $HOME . '/.vim,' . ',' . $newrtp 
    else
		if isdirectory($VIMBINHOME . '/doc')
			let $VIMRUNTIME = $VIMBINHOME
			let $VIM = $VIMBINHOME
		endif
		"let &runtimepath =  $HOME . '/.vim,' . &runtimepath 
		let &runtimepath =  $HOME . '/.vim,' . &runtimepath
		
    endif
endif
"echo "first load over..."
if exists('&packpath')
    let &packpath = &runtimepath
endif
" check if we have version-specific config
let s:dotvim = '~/.vim' . (v:version / 100)
if isdirectory(expand(s:dotvim))
    " setup runtimepath and packpath
    set runtimepath=$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
    execute 'set runtimepath^=' . s:dotvim
    execute 'set runtimepath+=' . s:dotvim . '/after'
    if exists('&packpath')
        let &packpath = &runtimepath
    endif
    " proceed with special config
    execute 'source' s:dotvim . '/vimrc'
    finish
endif
" default stuff (if any) follows...

"if has('win32') || has ('win64')
"    "let $VIMHOME = $VIM."/vimfiles"
"    let $VIMHOME = $HOME."/vimfiles"
"else
"    let $VIMHOME = $HOME."/.vim"
"endif
if split(&runtimepath,',')[0] =~ 'vimfiles'
    "source $HOME/vimfiles/markdown-preview.vimrc
    let $VIMFLHOME = $HOME.'/vimfiles/'
else
    let $VIMFLHOME = $HOME.'/.vim/'
    "source $HOME/.vim/markdown-preview.vimrc
endif

" " Set dpp base path (required)
" const s:dpp_base = '~/.cache/dpp/'
" 
" " Set dpp source path (required)
" " NOTE: The plugins must be cloned before.
" const s:dpp_src = '~/.cache/dpp/repos/github.com/Shougo/dpp.vim'
" const s:denops_src = '~/.cache/dpp/repos/github.com/denops/denops.vim'
" const s:denops_installer = '~/.cache/dpp/repos/github.com/Shougo/dpp-ext-installer'
" const s:denops_git = '~/.cache/dpp/repos/github.com/Shougo/dpp-protocol-git'
" const s:denops_lazy = '~/.cache/dpp/repos/github.com/Shougo/dpp-ext-lazy'
" const s:denops_toml = '~/.cache/dpp/repos/github.com/Shougo/dpp-ext-toml'
" 
" " Set dpp runtime path (required)
" execute 'set runtimepath^=' .. s:dpp_src
" 
" if s:dpp_base->dpp#min#load_state()
"   " NOTE: dpp#make_state() requires denops.vim
"   " NOTE: denops.vim and dpp plugins are must be added
"   execute 'set runtimepath^=' .. s:denops_src
"   execute 'set runtimepath^=' .. s:denops_installer
"   execute 'set runtimepath^=' .. s:denops_git
"   execute 'set runtimepath^=' .. s:denops_toml
"   execute 'set runtimepath^=' .. s:denops_lazy
" 
"   autocmd User DenopsReady
"   \ : echohl WarningMsg
"   \ | echomsg 'dpp load_state() is failed'
"   \ | echohl NONE
"   \ | call dpp#make_state(s:dpp_base, '{TypeScript config file path}')
" endif
" 
" autocmd User Dpp:makeStatePost
"       \ : echohl WarningMsg
"       \ | echomsg 'dpp make_state() is done'
"       \ | echohl NONE
" 
" " Attempt to determine the type of a file based on its name and
" " possibly its " contents. Use this to allow intelligent
" " auto-indenting " for each filetype, and for plugins that are
" " filetype specific.
" " filetype indent plugin on
" 
call plug#begin()

Plug 'yianwillis/vimcdoc'
Plug 'vim-airline/vim-airline'
Plug 'preservim/nerdtree'
Plug 'preservim/tagbar'
Plug 'voldikss/vim-floaterm'
Plug 'ludovicchabant/vim-gutentags'
"Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'npm ci'}
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'preservim/nerdcommenter'
Plug 'tomtom/tcomment_vim'
Plug 'ghifarit53/tokyonight-vim'
Plug 'tpope/vim-fugitive'
Plug 'Yggdroot/indentLine'
Plug 'luochen1990/rainbow'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'vim-ruby/vim-ruby'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'junegunn/goyo.vim'
Plug 'amix/vim-zenroom2'
Plug 'skywind3000/asyncrun.vim'
" If you have nodejs
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && npx --yes yarn  install' }
" Plug 'neoclide/jsonc.vim'
" Plug 'othree/html5.vim'
Plug 'alvan/vim-closetag'
Plug 'sheerun/vim-polyglot'
"Plug 'lsq/coc-git', {'do': 'yarn install --frozen-lockfile'}
Plug 'istepura/vim-toolbar-icons-silk'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

call plug#end()

set nocompatible            "不用兼容老版本的 Vi
filetype plugin indent on   "打开文件类型依赖的插件和缩进

set history=1000            "在命令行里输入的命令保存在历史记录中的数量
set ruler                   "显示光标位置的行号和列号
set number                  "在每行之前显示行号
set showcmd                 "在屏幕最后一行显示命令
set showmode                 "在插入、替换和可视模式里，在最后一行提供消息
set laststatus=2            "最后一个窗口何时有状态行，2 为总是
set cmdheight=2             "命令行使用的屏幕行数
set scrolloff=3             "光标上下两侧最少保留的屏幕行数，这使得工作时总有一些可见的上下文
"set mouse=a

if has('win64') 
    set pythonthreehome=C:\msys64\ucrt64
    "set pythonthreedll=C:\msys64\mingw64\bin\libpython3.12.dll
    set pythonthreedll=C:\msys64\ucrt64\bin\libpython3.12.dll
    "set rubydll=D:\Ruby\3.2.5-1\bin\x64-ucrt-ruby320.dll
    "set pythonthreehome=C:\Users\Administrator\scoop\apps\python312\current
    "set pythonthreedll=C:\Users\Administrator\scoop\apps\python312\current\python312.dll
    set luadll=C:\msys64\ucrt64\bin\lua54.dll
    "set luadll=C:\Users\Administrator\scoop\apps\lua\current\bin\lua54.dll
elseif has('win32unix')
    set pythonthreehome=/usr
    set pythonthreedll=/usr/bin/msys-python3.12.dll
    "set rubydll=/usr/bin/x64-ucrt-ruby320.dll
    "set rubydll=C:\\msys64\\ucrt64\\bin\\x64-ucrt-ruby310.dll
    "set luadll=C:\\Users\\Administrator\\scoop\\apps\\lua\\current\\bin\\lua54.dll
    set luadll=/ucrt64/bin/lua54.dll
endif


"以下三行关闭响铃，也关闭闪烁
set noerrorbells
set novisualbell
set t_vb=

"set guifont=FiraMono\ Nerd\ Font\ Mono:h10
"set guifont=CaskaydiaMono_NFM:h10
set guifont=ConsolasNF\ +\ LXGW\ WenKai\ Mono:h11:cGB2312
set termguicolors
"colorscheme tokyonight          "主题
colorscheme dracula "主题
set background=dark         "暗色模式
"set cursorline              "高亮光标所在的行，下一行设置光标所在行的背景颜色
"hi CursorLine term=NONE cterm=NONE ctermbg=239 guibg=Gray40
"set cursorcolumn            "高亮光标所在的列，下一行设置光标所在列的背景颜色
"hi CursorColumn term=NONE cterm=NONE ctermbg=239 guibg=Gray40

"let g:tokyonight_style = 'night'
"let g:tokyonight_enable_italic = 1
"let g:tokyonight_transparent_background = 0

syntax on                   "打开语法高亮
syntax sync fromstart
set redrawtime=10000
set backspace=2             "允许在自动缩进、换行符、插入开始位置上退格
set whichwrap+=<,>,h,l      "使光标移动可以跨行

set expandtab               "插入 <Tab> 时，自动替换为合适数量的空格 
set smarttab                "行首的 <Tab> 根据 'shiftwidth' 插入空白，<BS> 删除行首 'shiftwidth' 那么多的空白 
set shiftwidth=4            "缩进每一步使用的空白数目 
set tabstop=4               "文件里 <Tab> 代表的空格数
set autoindent              "自动缩进
set cindent                 "打开自动 C 程序缩进

set nobackup                "写入文件前不要备份
set noswapfile              "不要交换文件
set autoread                "如果文件在别处修改过，Vim 中重新自动读入
set autowrite               "切换缓冲区时，文件自动写入
set hidden                  "允许把未保存的缓冲区切换到后台
set encoding=utf-8
"set encoding=cp936
set fileencodings=utf-8,cp936,gb2312,latin1,ucs-bom,gbk,gb18030
set termencoding=utf-8
"let &termencoding=&encoding
set fileformats=unix,dos,mac
"language messages zh_CN.utf-8
"let $LANG='zh_CN.utf-8'

"以下几行设置和字符串模式匹配有关的选项
set showmatch
set matchtime=2
set hlsearch
set incsearch
set ignorecase
set smartcase
set magic
set lazyredraw
set nowrapscan
" coc.nvim不能自动补全
" set iskeyword+=_,$,@,%,#,-,.

"以下几行设置补全的样式
set wildoptions=pum
set wildmode=full
set wildmenu
set completeopt=menu,menuone,noinsert,noselect

set previewpopup=height:20,width:80     "把预览窗口配置为弹出窗口

"以下两行是设置背景透明所必须的
"hi NONTEXT ctermbg=NONE
"hi NORMAL ctermbg=NONE

"把Ctrl + V 映射为v
"nnoremap v <c-v>
"快速把当前行上移或下移一行
nnoremap [e :<c-u>execute 'move -1-' . v:count1<cr>
nnoremap ]e :<c-u>execute 'move +' . v:count1<cr>
"按 F2 打开关闭文件树窗口
map <F2> :NERDTreeToggle<CR>
"按 F3 打开函数列表窗口
map <F3> :TagbarToggle<CR>
"按 F4 打开浮动的终端窗口
map <F4> :FloatermToggle<CR>
"在打开终端窗口的情况下，按 F4 关闭浮动的终端窗口
tmap <F4> <C-\><C-n>:FloatermToggle<CR>
"按 F5 自动编译运行 C/C++ 文件，错误信息会进入 QuickFix 窗口
"map <F5> :!clear <CR> :set makeprg=g++ <Bar> make % -o %< <Bar> !./%< <CR> 

" Make <TAB> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
" inoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#confirm():"\<TAB>"
" Use <Ctrl-F> to format documents with prettier
" command! -nargs=0 Prettier :CocCommand prettier.formatFile
" noremap <C-F> :Prettier<CR>
"
" asyncrun setting
"
let g:asyncrun_open=6
let g:asyncrun_save=1
noremap <silent> <F9> :call CompileBuild()<CR>
func! CompileBuild()
    execute "w"
    if &filetype == 'c'
        execute ':AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 gcc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"'
    elseif &filetype == 'cpp'
        execute ':AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 g++ -O3 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" -lpthread'
    elseif &filetype == 'go'
        execute ":AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 go build $(VIM_FILEDIR)/$(VIM_FILENOEXT)"
    endif
endfunc
"链接：https://www.zhihu.com/question/437735833/answer/2551623586

noremap <silent> <F5> :call CompileRun()<CR>
func! CompileRun()
    execute "w"
    if &filetype == 'c'
       execute ':AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 $(VIM_FILEDIR)/$(VIM_FILENOEXT)'
    elseif &filetype == 'cpp'
       execute ":AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 $(VIM_FILEDIR)/$(VIM_FILENOEXT)"
    elseif &filetype == 'python' 
       execute "AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 python3 $(VIM_FILEPATH)"
    elseif &filetype == 'ruby'
       execute "AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 ruby $(VIM_FILEPATH)"
    elseif &filetype == 'html'
       execute ":AsyncRun -mode=term -pos=hide open $(VIM_FILEPATH)"
    elseif &filetype == 'go'
       execute ":AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 go run $(VIM_FILEPATH)"
    elseif &filetype == 'javascript'
       execute ":AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 node $(VIM_FILEPATH)"
    elseif &filetype == 'sh'
       execute ":AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 bash $(VIM_FILEPATH)"
    elseif &filetype == 'typescript'
       execute ":AsyncRun -mode=term -pos=bottom -rows=10 -focus=0 deno run $(VIM_FILEPATH)"
    endif
endfunc

let g:airline_powerline_fonts = 1
let airline#extensions#tabline#enable = 1

let gtagsPath = substitute(substitute(system('"which gtags|cygpath -m -f -"'),'shims','apps/global',''),'gtags.exe\n\+$','','')
"let gtagsPath = system('"which gtags"')
"echo 'haha'.$gtagsPath
let $GTAGSLABEL = 'native-pygments'
"let $GTAGSCONF =  'c:/Users/Administrator/scoop/apps/global/current/share/gtags/gtags.conf'
let $GTAGSCONF = gtagsPath . 'current/share/gtags/gtags.conf'
"echo $GTAGSCONF
"下面几行配置为使用 gutentags 插件管理 ctags 文件
let g:gutentags_modules = ['ctags']
"let g:gutentags_ctags_executable = 'c:\Users\Administrator\scoop\shims\ctags'
let g:gutentags_project_root = ['.git','.svn','.project','.root']
"let s:vim_tags = expand('~/.cache/tags')
let s:vim_tags = escape('C:\Users\Administrator\.cache\tags','\')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)
    silent! call mkdir(s:vim_tags)
endif
let g:gutentags_ctags_extra_args = ['e', '--fields=+niazS', '--extra=+q']  "我觉得这几个参数对 C/C++ 没有意义
let g:gutentags_ctags_extra_args += ['--kinds-C=+px']
let g:gutentags_ctags_extra_args += ['--kinds-C++=+px']

"下面几行配置为使用 LeaderF 插件管理 gtags 数据库
let g:Lf_RootMarkers = ['.git', '.svn', '.project', '.root']
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_GtagsAutoUpdate = 1
let g:Lf_Gtagslabel = $GTAGSLABEL
let g:Lf_Gtagsconf = $GTAGSCONF
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2" } 
let g:Lf_WindowHeight = 0.3
let g:Lf_HideHelp = 1
let g:Lf_ShowRelativePath = 1

"以下内容为 indentLine 的配置
let g:indentLine_char = '┊'
"let g:indentLine_first_char = '┊'
let g:indentLine_showFirstIndentLevel = 1

"以下内容开启 vim-rainbow
let g:rainbow_active=1
let g:rainbow_conf = {
\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\	'operators': '_,_',
\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\	'separately': {
\		'*': {},
\		'tex': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\		},
\		'lisp': {
\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\		},
\		'vim': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\		},
\		'html': {
\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\		},
\		'css': 0,
\		'nerdtree': 0, 
\	}
\}

" 以下内容抄自 coc.nvim 的官网
" utf-8 byte sequence

let g:coc_config_home=$VIMFLHOME
let g:coc_data_home="~/.config/coc"
let g:coc_global_extensions = ['coc-json',  'coc-git','coc-vimlsp', 'coc-yaml', 'coc-xml', 'coc-toml', 'coc-tsserver', 'coc-prettier', 'coc-floaterm', 'coc-css', 'coc-deno', 'coc-powershell', 'coc-pyright'] 
"let g:coc_node_args = ['--nolazy', '--inspect-brk=6045']

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
            \ coc#pum#visible() ? coc#pum#next(1) :
            \ CheckBackspace() ? "\<Tab>" :
            \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
    else
        call feedkeys('K', 'in')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)


" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)


" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

source $VIMFLHOME/markdown-preview.vimrc

nnoremap <space>f :FZF<cr>

"" Custom keymap
nnoremap <space>b :buffers<cr>:b<space>
nnoremap <space>e :b#<cr>
nnoremap <space>w :w<cr>
nnoremap <space>q :qa<cr>
inoremap jf <esc>
cnoremap jf <c-c>
"redir END
